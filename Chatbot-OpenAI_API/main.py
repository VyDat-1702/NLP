from openai import OpenAI  # Th∆∞ vi·ªán OpenAI API
import streamlit as st
import os  # L√†m vi·ªác v·ªõi h·ªá th·ªëng file

st.title("My Chatbot")

USER_AVATAR = "üë§"
BOT_AVATAR = "ü§ñ"
client = OpenAI(api_key=".....................")  # T·∫°o m·ªôt client t·ª´ API

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-3.5-turbo"

# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n l∆∞u l·ªãch s·ª≠ chat
CHAT_HISTORY_FILE = "chat_history.txt"

# T·∫£i l·ªãch s·ª≠ chat t·ª´ file TXT
def load_chat_history():
    if os.path.exists(CHAT_HISTORY_FILE):
        with open(CHAT_HISTORY_FILE, "r", encoding="utf-8") as file:
            lines = file.readlines()
            messages = []
            for i in range(0, len(lines), 2):  # M·ªói tin nh·∫Øn g·ªìm 2 d√≤ng: role + n·ªôi dung
                role = lines[i].strip()
                content = lines[i + 2].strip()
                messages.append({"role": role, "content": content})
            return messages
    return []

# L∆∞u l·ªãch s·ª≠ chat v√†o file TXT
def save_chat_history(messages):
    with open(CHAT_HISTORY_FILE, "w", encoding="utf-8") as file:
        for msg in messages:
            file.write(f"{msg['role']}\n{msg['content']}\n")

# Kh·ªüi t·∫°o ho·∫∑c t·∫£i l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = load_chat_history()

# Sidebar v·ªõi n√∫t x√≥a l·ªãch s·ª≠ chat v√† hi·ªÉn th·ªã l·ªãch s·ª≠ chat
with st.sidebar:
    st.header("History")
    if st.button("Delete Chat History"):
        st.session_state.messages = []
        save_chat_history([])
        st.rerun()  # T·∫£i l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat trong sidebar
    if st.session_state.messages:
        for message in st.session_state.messages:
            if message["role"] == "user":  # Ch·ªâ hi·ªÉn th·ªã c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
                st.write(f"{message['content']}")
    else:
        st.write("")

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat trong giao di·ªán ch√≠nh
for message in st.session_state.messages:
    avatar = USER_AVATAR if message["role"] == "user" else BOT_AVATAR
    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])

# Giao di·ªán ch√≠nh c·ªßa chatbot
if prompt := st.chat_input("How can I help?"):  # Khung nh·∫≠p prompt
    st.session_state.messages.append({"role": "user", "content": prompt})  # L∆∞u prompt v√†o list messages
    with st.chat_message("user", avatar=USER_AVATAR):  # Hi·ªÉn th·ªã l√™n giao di·ªán c√πng v·ªõi avatar t∆∞∆°ng ·ª©ng
        st.markdown(prompt)

    with st.chat_message("assistant", avatar=BOT_AVATAR):
        message_placeholder = st.empty()
        full_response = ""
        for response in client.chat.completions.create(
            model=st.session_state["openai_model"],
            messages=st.session_state["messages"],
            stream=True,  # Nh·∫≠n d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
        ):
            full_response += response.choices[0].delta.content or ""
            message_placeholder.markdown(full_response + "|")  # Hi·ªÉn th·ªã ph·∫£n h·ªìi
        message_placeholder.markdown(full_response)

    st.session_state.messages.append({"role": "assistant", "content": full_response})

# L∆∞u l·ªãch s·ª≠ chat sau m·ªói l·∫ßn t∆∞∆°ng t√°c
save_chat_history(st.session_state.messages)
